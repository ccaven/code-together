[
    {
        "title": "Basic Shapes",
        "code": "// Let's draw a rectangle\n\nrect(100, 150, 200, 150);\n//   ^    ^     ^     ^\n//   x    y   width  height\n\n// Now let's add some color\nfill(255, 100, 50);\n//   ^     ^    ^\n//   red  green blue\n\n// These rectangles now appear as orange\nrect(50, 50, 50, 50);\nrect(150, 50, 50, 50);\nrect(250, 50, 50, 50);\nrect(350, 50, 50, 50);\nrect(450, 50, 50, 50); // increasing the x-coordinate\n                       // means going more to the right!\n\n\n// What other shapes can we draw?\nfill(50, 150, 255);\n\n// \"ellipse\" is basically a circle, but can have different width/height\nellipse(300, 500, 50, 50);\n//     (x, y, width, height) just like rect\n\n// This is a squished one\n//                 \\/ see the increased \"width\" parameter\nellipse(300, 565, 150, 50);"
    },
    {
        "title": "Variables",
        "code": "// Let's make some variables!\n\n// These are red\nfill(250, 50, 100);\nrect(100, 100, 50, 25);\nrect(100, 150, 50, 25);\nrect(100, 200, 50, 25);\nrect(100, 250, 50, 25);\nrect(100, 300, 50, 25);\n//    ^ hmm notice a lot of repeated numbers?\n\n// \\/ now we've made a variable called \"x\"\nvar x = 200;\n\n// Anytime we use \"x\" now, it means 200\n\n// These are green\nfill(50, 250, 100);\nrect(x, 100, 50, 25);\nrect(x, 150, 50, 25);\nrect(x, 200, 50, 25);\nrect(x, 250, 50, 25);\nrect(x, 300, 50, 25);\n//   ^ all of these have an x-coordinate of 200\n\n// We can also reassign variables\nx = 300;\n\n// From this point on, x will be 300\n// Let's run the exact same commands as before\n// and let's make them blue\nfill(50, 100, 250);\nrect(x, 100, 50, 25);\nrect(x, 150, 50, 25);\nrect(x, 200, 50, 25);\nrect(x, 250, 50, 25);\nrect(x, 300, 50, 25);\n// See, the same command as before produced a different result\n// because the value of \"x\" was changed!"
    },
    {
        "title": "Animation Loop",
        "code": "// Initialize the position of the follower\nlet followerX = 300;\nlet followerY = 300;\n\ndraw = function () {\n\n  // Draw our follower\n  background(44, 44, 44);\n  fill(250, 150,  150);\n  noStroke();\n  ellipse(followerX, followerY, 50, 50);\n\n  // Calculate how far away the follower is from the mouse\n  let distanceX = mouseX - followerX;\n  let distanceY = mouseY - followerY;\n  \n  // Cover 10% of the distance to the mouse each frame\n  followerX += distanceX * 0.1;\n  followerY += distanceY * 0.1;\n  \n};"
    },
    {
        "title": "User Input: mouseMoved",
        "code": "// Mouse events\n// mouseMoved is a builtin function that runs whenever you move the mouse\n\nmouseMoved = function() {\n  // mouseX is the x-position of the mouse on the canvas\n  // mouseY is the y-position of the mouse on the canvas\n  // pmouseX is the mouseX of the previous frame\n  // pmouseY is the mouseY of the previous frame\n\n  // mouseIsPressed is true if you are holding the\n  // mouse button down and false if you aren't\n\n  // Let's draw a line connecting the mouse's \n  // previous position with it's current position\n\n  if (mouseIsPressed) { // only run this code if we've clicked\n    \n    line(pmouseX, pmouseY, mouseX, mouseY);\n  \n  }\n  \n};"
    },
    {
        "title": "Text: Bounding Box",
        "code": "let msg = \"Some text.\\n\\nMore text.\";\nlet size = 100;\nlet x = 300, y = 300;\n\ntextFont(\"sans-serif\");\ntextSize(size);\ntextAlign(CENTER, CENTER);\nrectMode(CENTER);\n\nfunction textHeight(msg) {\n    return size * msg.split(\"\\n\").length;\n}\n\nlet w = textWidth(msg);\nlet h = textHeight(msg);\nrect(x, y, w, h);\n\ntext(msg, x, y);\n\n"
    },
    {
        "title": "Clock",
        "code": "// Let's make a clock!\n\ntextAlign(CENTER, CENTER);\ntextFont(\"Trebuchet MS\");\ntextSize(50);\nfill(0);\nnoStroke();\n\ndraw = function () {\n    background(255);\n\n    // Let's get our hour/minute/seconds\n    let h = hour();\n    let m = minute();\n    let s = seconds();\n\n    // Are we in the AM or PM?\n    let label = h > 12 ? \"pm\" : \"am\";\n\n    // Prepare each number for outputting\n    h = (h % 12).toString();\n    m = m.toString().padStart(2, \"0\");\n    s = s.toString().padStart(2, \"0\")\n    \n    text(`${h}:${m}:${s} ${label}`, 300, 300);\n};\n"
    }
]